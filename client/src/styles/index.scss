// Importation des fichiers de variables et mixins
// Ces fichiers permettent de centraliser les variables (couleurs, dimensions, etc.) 
// et les mixins (fonctions de style réutilisables) pour une maintenance facilitée.
@import 'variables';
@import 'mixins';


// ================================
// Réinitialisation et styles globaux
// ================================

// Applique à tous les éléments : 
// - box-sizing: border-box pour inclure padding et border dans la largeur totale
// - margin et padding à 0 pour éliminer les espacements par défaut
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

// Applique au body et html : 
// - 100% de largeur et hauteur pour occuper tout l'écran
// - une police par défaut et un fond noir pour un bon contraste
body, html {
  width: 100%;
  height: 100%;
  font-family: Arial, sans-serif;
  background-color: #000; // Fond noir pour un bon contraste
}


// ================================
// Styles du container principal de l'application
// ================================

// La classe .app centre le contenu de l'application verticalement et horizontalement
.app {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}


// ================================
// Styles du container du jeu Tetris
// ================================

// La classe .tetris définit la zone du jeu
// Elle est disposée en flex (pour aligner le jeu et l'aside côte à côte)
// et possède une bordure blanche ainsi qu'une ombre portée (via le mixin box-shadow)
.tetris {
  display: flex;
  border: 2px solid #fff;
  @include box-shadow(0 0 10px rgba(255, 255, 255, 0.5));
}


// ================================
// Styles de la grille de jeu (Stage)
// ================================

// La grille de jeu est définie en CSS Grid avec 20 lignes et 12 colonnes, 
// chaque cellule mesurant 30px et avec un gap de 1px entre elles.
// Le fond de la grille est gris foncé (#333).
.stage {
  display: grid;
  grid-template-rows: repeat(20, 30px); // 20 lignes de 30px de hauteur
  grid-template-columns: repeat(12, 30px); // 12 colonnes de 30px de largeur
  gap: 1px;
  background-color: #333;
}


// ================================
// Styles de chaque cellule de la grille
// ================================

// La classe .cell définit les dimensions et le fond par défaut (légèrement transparent)
// Chaque cellule utilise aussi une classe additionnelle (par exemple 'clear', 'I', 'J', etc.)
// pour définir son état ou sa couleur selon la pièce.
.cell {
  width: 30px;
  height: 30px;
  background-color: rgba(0, 0, 0, 0.1);

  // Classe "clear" : cellule vide
  &.clear {
    background-color: rgba(0, 0, 0, 0.1);
  }

  // Styles pour les pièces
  // Chaque classe correspond à une pièce (I, J, L, O, S, T, Z)
  // et définit la couleur de fond associée.
  &.I { background-color: rgb(80, 227, 230); }
  &.J { background-color: rgb(36, 95, 223); }
  &.L { background-color: rgb(223, 173, 36); }
  &.O { background-color: rgb(223, 217, 36); }
  &.S { background-color: rgb(48, 211, 56); }
  &.T { background-color: rgb(132, 61, 198); }
  &.Z { background-color: rgb(227, 78, 78); }
}


// ================================
// Styles de la zone d'affichage des informations (score, niveau, etc.)
// ================================

// La balise aside contient les informations du jeu (ex. score, niveau)
// et est organisée en flex direction column pour les empiler verticalement.
aside {
  margin: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}


// ================================
// Styles du composant Display (affichage des informations)
// ================================

// La classe .display stylise les blocs d'information (ex. Score, Level)
// avec une bordure, un fond blanc et un padding, et centre le texte.
.display {
  margin-bottom: 20px;
  padding: 20px;
  border: 2px solid #ddd;
  min-width: 150px;
  text-align: center;
  background-color: #fff;

  // Style particulier lorsqu'il y a game over : fond rouge et texte blanc.
  &.game-over {
    background-color: red;
    color: #fff;
  }
}


// ================================
// Styles du bouton de démarrage
// ================================

// Le bouton de démarrage utilise la classe .start-button pour définir son apparence : 
// padding, taille de police, couleur de fond et de texte, ainsi qu'un effet de transition sur le survol.
.start-button {
  padding: 10px 20px;
  margin-bottom: 5px;
  font-size: 1rem;
  background-color: #333;
  color: #fff;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s;

  &:hover {
    background-color: #555;
  }
}


// ================================
// Style pour les lignes dans la grille de jeu
// ================================

// La classe .row utilise display: contents pour déplier le contenu 
// et permettre aux cellules d'être des enfants directs de la grille.
.row {
  display: contents; // Permet de "déplier" le contenu comme s'il était direct dans le conteneur parent
}


// ================================
// Styles pour l'aperçu de la prochaine pièce (NextPiece)
// ================================

.next-piece {
  margin-top: 20px;
  padding: 10px;
  border: 2px solid #ddd;
  background-color: #fff;
  text-align: center;

  h3 {
    margin-bottom: 10px;
    font-size: 1rem;
  }

  // La grille d'aperçu de la prochaine pièce est organisée en flex
  // pour afficher les colonnes côte à côte, et centrer leur contenu.
  .next-piece-grid {
    display: flex;  // Affiche les colonnes côte à côte
    justify-content: center;  // Centre horizontalement les colonnes
    align-items: center;  // Centre verticalement les colonnes
  }

  // La classe .row ici permet d'afficher les cellules de chaque colonne en ligne.
  // On utilise display: flex pour aligner horizontalement les cellules à l'intérieur de chaque colonne.
  .row {
    display: flex;  // Les lignes sont affichées comme une ligne horizontale
  }

  // Les cellules de l'aperçu ont les mêmes dimensions et fond par défaut que dans la grille principale.
  .cell {
    width: 30px;
    height: 30px;
    background-color: rgba(0, 0, 0, 0.1);  // Fond par défaut pour les cellules vides
  }

  // Définition des couleurs pour les différentes pièces dans l'aperçu.
  .I { background-color: rgb(80, 227, 230); }
  .J { background-color: rgb(36, 95, 223); }
  .L { background-color: rgb(223, 173, 36); }
  .O { background-color: rgb(223, 217, 36); }
  .S { background-color: rgb(48, 211, 56); }
  .T { background-color: rgb(132, 61, 198); }
  .Z { background-color: rgb(227, 78, 78); }

  // Classe "clear" pour les cellules vides de l'aperçu (transparentes)
  .clear {
    background-color: rgba(0, 0, 0, 0);  // Cellules vides transparentes
  }
}
